<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gd.fintech.lms.teacher.mapper.TeacherReportMapper">
	<resultMap type="gd.fintech.lms.vo.ReportSubmit" id="selectTeacherReportSubmitListResult">
		<result property="reportSubmitNo" column="report_submit_no" />
		<result property="accountId" column="account_id" />
		<result property="reportSubmitTitle" column="report_submit_title" />
		<result property="reportSubmitPoint" column="report_submit_point" />
		<collection property="student" ofType="gd.fintech.lms.vo.Student">
			<result property="studentName" column="student_name" />
			<result property="studentGender" column="student_gender" />
		</collection>
	</resultMap>
	
	<!-- 페이징을 적용하여 과제(report) 테이블에서 강좌 고유번호(lectureNo)에 해당하는 데이터 목록을 가져온다 -->
	<select id="selectTeacherReportListByPage" parameterType="java.util.Map" resultType="gd.fintech.lms.vo.Report">
		SELECT
			report_no reportNo, 
			lecture_no lectureNo, 
			report_title reportTitle, 
			report_content reportContent, 
			report_createdate reportCreatedate, 
			report_updatedate reportUpdatedate, 
			report_startdate reportStartdate, 
			report_enddate reportEnddate
		FROM
			report
		WHERE
			lecture_no = #{lectureNo}
		ORDER BY
			report_no DESC
		LIMIT
			#{beginRow}, #{rowPerPage}
	</select>
	
	<!-- 과제(report) 테이블에서 강좌 고유번호(lectureNo)에 해당하는 총 데이터 수를 확인한다 -->
	<select id="selectTeacherReportListCount" parameterType="Integer" resultType="Integer">
  		SELECT
  			COUNT(*)
  		FROM
  			report
  		WHERE
  			lecture_no = #{lectureNo};
  	</select>
  	
  	<!-- 강사가 과제(report) 테이블에서 과제 고유번호(reportNo)에 해당하는 데이터를 가져온다 -->
  	<select id="selectTeacherReportOne" parameterType="Integer" resultType="gd.fintech.lms.vo.Report">
  		SELECT
  			report_no reportNo, 
  			lecture_no lectureNo, 
  			report_title reportTitle, 
  			report_content reportContent, 
  			report_createdate reportCreatedate, 
  			report_updatedate reportUpdatedate, 
  			report_startdate reportStartdate, 
  			report_enddate reportEnddate
  		FROM
  			report
  		WHERE
  			report_no = #{reportNo}
  	</select>
  	
  	<!-- 각 과제 고유번호(reportNo)에 해당하는 페이지일 경우 학생들의 과제 제출 목록을 출력한다 -->
  	<select id="selectTeacherReportSubmitList" parameterType="java.util.Map" resultMap="selectTeacherReportSubmitListResult">
	  	SELECT
			rs.report_submit_no, 
			cr.account_id, 
			s.student_name, 
			s.student_gender,
			rs.report_submit_title, 
			rs.report_submit_point
		FROM
			class_registration cr
		LEFT OUTER JOIN
			student s ON
			cr.account_id = s.student_id
		LEFT OUTER JOIN
			report_submit rs ON
			cr.account_id = rs.account_id AND
			rs.report_no = #{reportNo}
		WHERE
			(cr.class_registration_state = "수강중" OR
			cr.class_registration_state = "수료") AND
			cr.lecture_no = #{lectureNo}
		ORDER BY
			s.student_name
	</select>
  	
  	<!-- 강사가 과제(report) 테이블에 과제(Report)에 해당하는 데이터를 입력한다 -->
  	<insert id="insertTeacherReport" parameterType="gd.fintech.lms.vo.Report">
  		<selectKey resultType="Integer" keyProperty="reportNo" order="AFTER">
  			SELECT LAST_INSERT_ID()
  		</selectKey>
  		INSERT INTO report (
  			lecture_no, 
  			report_title, 
  			report_content, 
  			report_createdate, 
  			report_updatedate, 
  			report_startdate, 
  			report_enddate
  		) VALUES (
  			#{lectureNo}, 
  			#{reportTitle}, 
  			#{reportContent}, 
  			NOW(), 
  			NOW(), 
  			#{reportStartdate}, 
  			#{reportEnddate}
  		)
  	</insert>
  	
  	<!-- 강사가 과제(report) 테이블에 있는 과제 고유번호(reportNo)에 해당하는 데이터를 수정한다 -->
  	<update id="updateTeacherReport" parameterType="gd.fintech.lms.vo.Report">
  		UPDATE
  			report
  		SET
  			report_title = #{reportTitle}, 
  			report_content = #{reportContent}, 
  			report_updatedate = NOW(), 
  			report_startdate = #{reportStartdate}, 
  			report_enddate = #{reportEnddate}
  		WHERE
  			report_no = #{reportNo}
  	</update>
</mapper>