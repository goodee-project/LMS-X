<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gd.fintech.lms.manager.mapper.ManagerLectureMapper">
	<!-- 운영자가 추가한 강의 목록 -->
	<select id="selectLectureListByPage" parameterType="java.util.Map" resultType="gd.fintech.lms.vo.Lecture">
		SELECT
			lecture_no lectureNo,
			teacher_name teacherName,
			lecture_name lectureName,
			lecture_startdate lectureStartdate,
			lecture_enddate lectureEnddate,
			lecture_total lectureTotal
		FROM 
			lecture
		ORDER BY 
			lecture_no DESC
		LIMIT 
			 #{beginRow}, #{rowPerPage}
	</select>
	
	<!-- 개설 되어 있는 강의 개수 -->
	<select id="selectLectureCount" resultType="Integer">
		SELECT
			COUNT(*)
		FROM 
			lecture
	</select>
	<!-- 강의 추가 -->
	<insert id="insertLecture" parameterType="gd.fintech.lms.vo.Lecture">
		INSERT INTO 
		lecture (	
			account_id,	
			subject_no,	
			teacher_name,	
			lecture_name,	
			textbook_isbn,	
			lecture_startdate,
			lecture_enddate,
			lecture_total,
			classroom_no,
			lecture_createdate,
			lecture_updatedate
		) VALUES (
			#{accountId},
			#{subjectNo},
			#{teacherName},
			#{lectureName},
			#{textbookIsbn},	
			#{lectureStartdate},
			#{lectureEnddate},	
			#{lectureTotal},
			#{classroomNo},
			NOW(),
			NOW()
			)	
	</insert>
	<resultMap type="gd.fintech.lms.vo.LectureAndClassAndTextbook" id="selectLectureOneResult">
		<collection property="lecture" ofType="gd.fintech.lms.vo.Lecture">
			<result property="lectureNo" column="lecture_no"/>
			<result property="accountId" column="account_id"/>
			<result property="subjectNo" column="subject_no"/>
			<result property="teacherName" column="teacher_name"/>
			<result property="lectureName" column="lecture_name"/>
			<result property="lectureStartdate" column="lecture_startdate"/>
			<result property="lectureEnddate" column="lecture_enddate"/>
			<result property="lectureTotal" column="lecture_total"/>
			<result property="classroomNo" column="classroom_no"/>
		</collection>
		<collection property="textbook" ofType="gd.fintech.lms.vo.Textbook">
			<result property="textbookIsbn" column="textbook_isbn"/>
			<result property="textbookTitle" column="textbook_title"/>
		</collection>
		<collection property="classroom" ofType="gd.fintech.lms.vo.Classroom">
			<result property="classroomNo" column="classroom_no"/>
			<result property="classroomNumber" column="classroom_number"/>
		</collection>
	</resultMap>
	<!-- 강의 상세 보기 출력 쿼리문 -->
	<select id="selectLectureOne" parameterType="int" resultMap="selectLectureOneResult">
        SELECT
            l.lecture_no, 
            l.account_id, 
            l.subject_no,
            l.teacher_name,
            l.lecture_name,
            t.textbook_isbn,
            t.textbook_title,
            l.lecture_startdate,
            l.lecture_enddate,
            l.lecture_total,
            l.classroom_no,
            c.classroom_number
        FROM 
            lecture AS l 
        LEFT JOIN 
            textbook AS t ON 
            l.textbook_isbn = t.textbook_isbn
        LEFT JOIN 
            classroom AS c ON 
            l.classroom_no = c.classroom_no
        WHERE 
            lecture_no = #{lectureNo}
    </select>
	<!-- 강의 수정 쿼리문 -->
	<update id="updateLecture" parameterType="gd.fintech.lms.vo.Lecture">
		UPDATE 
			lecture 
		SET
			account_id = #{accountId},
			subject_no = #{subjectNo},
			teacher_name = #{teacherName},
			lecture_name = #{lectureName},
			textbook_isbn = #{textbookIsbn},
			lecture_startdate = #{lectureStartdate},
			lecture_enddate = #{lectureEnddate},
			lecture_total = #{lectureTotal},
			classroom_no = #{classroomNo},
			lecture_updatedate = NOW()
		WHERE 
			lecture_no = #{lectureNo}
	</update>
	<!--운영자가 선택한 강좌 고유 번호에 따른 강의 상태 변경  -->
	<update id="updateLectureStat" parameterType="gd.fintech.lms.vo.Lecture">
		UPDATE
			lecture
		SET
			lecture_startdate = 0000-00-00,
			lecture_enddate = 0000-00-00,
			lecture_updatedate = NOW()
		WHERE
			lecture_no = #{lectureNo}
	</update>
	<!-- 강의의 수강 학생 목록 -->
	<select id="selectClassRegistrationList" parameterType="int" resultType="gd.fintech.lms.vo.ClassRegistration">
		SELECT 
			class_registration_no classRegistrationNo,
			lecture_no lectureNo,
			account_id accountId,
			class_registration_state classRegistrationState,
			class_registration_createdate classRegistrationCreatedate,
			class_registration_updatedate classRegistrationUpdatedate
		FROM 
			class_registration 
		WHERE 
			lecture_no = #{lectureNo} AND
			class_registration_state != '대기' AND
			class_registration_state != '취소'
	</select>
	<!-- 강의의 대기중인 수강 학생 목록 -->
	<select id="selectClassRegistrationListByState" parameterType="int" resultType="gd.fintech.lms.vo.ClassRegistration">
		SELECT 
			class_registration_no classRegistrationNo,
			lecture_no lectureNo,
			account_id accountId,
			class_registration_state classRegistrationState,
			class_registration_createdate classRegistrationCreatedate,
			class_registration_updatedate classRegistrationUpdatedate
		FROM 
			class_registration 
		WHERE 
			lecture_no = #{lectureNo} AND
			class_registration_state = '대기'
	</select>
	<!-- 강의의 수강 학생 목록 개수 -->
	<select id="selectClassRegistrationListCount" parameterType="int" resultType="int">
		SELECT 
			COUNT(*) cnt
		FROM 
			class_registration 
		WHERE 
			lecture_no = #{lectureNo} AND
			class_registration_state != '대기' AND
			class_registration_state != '취소'
	</select>
	<!-- 강의의 대기중인 수강 학생 목록 개수 -->
	<select id="selectClassRegistrationListByStateCount" parameterType="int" resultType="int">
		SELECT 
			COUNT(*) cnt
		FROM 
			class_registration 
		WHERE 
			lecture_no = #{lectureNo} AND
			class_registration_state = '대기' 
	</select>
	<!-- 학생 수강 상태 변경 -->
	<update id="updateClassRegistrationState" parameterType="java.util.Map">
		UPDATE
			class_registration
		SET 
			class_registration_state = #{state},
			class_registration_updatedate = NOW()
		WHERE 
			lecture_no = #{lectureNo} AND
			account_id = #{accountId}
	</update>
</mapper>