<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gd.fintech.lms.manager.restmapper.ManagerChartRestMapper">
	<!-- 해당 강좌의 과제 리스트 가져오기 -->
	<select id="selectReportListByLectureNo" resultType="gd.fintech.lms.vo.Report" parameterType="int">
		SELECT 
			report_no reportNo,
			lecture_no lectureNo,
			report_title reportTitle
		FROM
			report
		WHERE 
			lecture_no = #{lectureNo}
		ORDER BY 
			report_createdate DESC 
	</select>
	<!-- 최근 2주일 접속 트래픽 -->
	<select id="selectLatestLoginLog" resultType="java.util.Map">
		SELECT 
			DATE_FORMAT(login_log_date, '%Y-%m-%d') day, 
			COUNT(*) cnt
		FROM login_log
		WHERE 
			15 > (DATE_FORMAT(NOW(), '%Y-%m-%d') - DATE_FORMAT(login_log_date, '%Y-%m-%d'))
		GROUP BY 
			DATE_FORMAT(login_log_date, '%Y-%m-%d')
		ORDER BY 
			DATE_FORMAT(login_log_date, '%Y-%m-%d') DESC
	</select>
	<!-- 강의별 성적 평균 -->
	<select id="selectAvgGradeByLecture" resultType="java.util.Map">
		SELECT
		    l.lecture_no,
		    l.lecture_name,
		    AVG(a.answer_score) avg
		FROM 
		    answersheet a
		JOIN 
		    lecture l ON
		    a.lecture_no = l.lecture_no
		GROUP BY 
		    a.lecture_no
	</select>
	
	<!-- 강의별 최대/최소 성적 -->
	<select id="selectMinMaxGradeByLecture" resultType="java.util.Map">
		SELECT
		    a lecture_no, 
		    c lecture_name,
		    MIN(d) min_score,
		    MAX(d) max_score
		FROM (
		    SELECT
		        a.lecture_no a,
		        a.account_id b,
		        l.lecture_name c,
		        SUM(answer_score) d
		    FROM 
		        answersheet a
		    JOIN 
		       lecture l ON
		       a.lecture_no = l.lecture_no
		    GROUP BY 
		        a.account_id, a.lecture_no
		        ) aa
		GROUP BY a
	</select>
	
	<!-- 학생별 성적 -->
	<select id="selectGradeBySubject" parameterType="int" resultType="java.util.Map">
		SELECT
		    a.lecture_no,
		    l.lecture_name,
		    a.account_id,
		    SUM(a.answer_score) sum_score
		FROM 
		    answersheet a
		JOIN 
		    lecture l ON
		    a.lecture_no = l.lecture_no
		WHERE 
			l.lecture_no = #{lectureNo}
		GROUP BY 
			a.account_id
	</select>
	
	<!-- 학생별 출석률 -->
	<select id="selectAttendanceRateByStudent" parameterType="int" resultType="java.util.Map">
		SELECT 
		    a.lecture_no ,
		    a.account_id,    
			 ROUND((COUNT(*) / sj.subject_totalday),2) * 100 att
		FROM
		    student s
		LEFT JOIN
		    attendance a ON 
		    s.student_id = a.account_id
		JOIN 
		    lecture l ON
		    l.lecture_no = a.lecture_no
		JOIN 
			 subject sj ON
			 sj.subject_no = l.subject_no
		WHERE 
		    a.attendance_state='출석' AND 
		    a.lecture_no = #{lectureNo}
		GROUP BY 
		    a.lecture_no, a.account_id
	</select>
	
	<!-- 강좌별 별점 점수 -->
	<select id="selectStarRatingByLecture" resultType="java.util.Map">
		SELECT
		   l.lecture_name,
			ROUND(AVG(case when cr.class_registration_point != 0 then cr.class_registration_point
			when cr.class_registration_point = 0 then 0 END),1) point
		FROM 
			class_registration cr
		JOIN 
			lecture l ON 
		   l.lecture_no = cr.lecture_no
		GROUP BY 
			cr.lecture_no
	</select>
	
	<!-- 학생별 과제 점수 -->
	<select id="selectReportCountByStudent" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT
		    cr.account_id, 
		    SUM(case when rs.report_submit_point = -1 then 0
		    		when rs.report_submit_point IS NULL then 0
					 ELSE rs.report_submit_point END) point
		FROM
		    class_registration cr
		LEFT JOIN
		    report_submit rs ON
		    rs.account_id = cr.account_id AND
		    rs.report_no = #{reportNo}
		LEFT JOIN
		    report r ON
		    r.report_no = rs.report_no
		WHERE
		    (cr.class_registration_state = "수강중" OR
		    cr.class_registration_state = "수료") AND
		    cr.lecture_no = #{lectureNo}
		GROUP BY
		    cr.account_id
		ORDER BY
		   cr.account_id
	</select>
	
	<!-- 강좌별 과제 제출률 -->
	<select id="selectReportSubmissionRateByLecture" parameterType="int" resultType="java.util.Map">
		SELECT 
			l.lecture_no lectureNo,
            l.lecture_name lectureName,
            r.report_no reportNo,
            r.report_title reportTitle,
			COUNT(rs.report_submit_no) studentSubmitted,
			COUNT(cr.class_registration_no) totalStudent,
			ROUND(COUNT(rs.report_submit_no)/COUNT(cr.class_registration_no)*100) submissionRate
		FROM 
			lecture l
		INNER JOIN 
			report r ON l.lecture_no = r.lecture_no
		LEFT OUTER JOIN 
			class_registration cr
			ON l.lecture_no = cr.lecture_no
		LEFT OUTER JOIN 
			report_submit rs
			ON r.report_no = rs.report_no AND
		    cr.account_id = rs.account_id
		WHERE 
			(cr.class_registration_state = "수강중" OR
			cr.class_registration_state = "수료") AND
			l.lecture_no = #{lectureNo}
		GROUP BY 
			r.report_no
	</select>
	
	<!-- 월별 로그인 횟수 -->
	<select id="selectLoginCountByMonth" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
		    account_id, 
		    YEAR(login_log_date), 
		    MONTH(login_log_date), 
		    COUNT(*)
		FROM 
			login_log
		WHERE 
		    YEAR(login_log_date) = #{Year} AND 
		    MONTH(login_log_date) = #{Month}
		GROUP BY 
		    account_id, 
		    YEAR(login_log_date), 
		    MONTH(login_log_date)
		ORDER BY 
		    YEAR(login_log_date), 
		    MONTH(login_log_date) DESC
	</select>
	
	<!-- 강의별 과제 점수 평균 -->
	<select id="selectAvgReportByLecture" parameterType="int" resultType="java.util.Map">
		SELECT 
			l.lecture_no lectureNo,
            l.lecture_name lectureName,
            r.report_no reportNo,
            r.report_title reportTitle,
			COUNT(rs.report_submit_no) studentSubmitted,
			COUNT(cr.class_registration_no) totalStudent,
		    SUM(case when rs.report_submit_point = -1 then 0
			 		when rs.report_submit_point != -1 then rs.report_submit_point END)
			 	/COUNT(cr.class_registration_no) Averagescore
		FROM 
			lecture l
		INNER JOIN 
			report r
			ON l.lecture_no = r.lecture_no
		LEFT OUTER JOIN 
			class_registration cr
			ON l.lecture_no = cr.lecture_no
		LEFT OUTER JOIN 
			report_submit rs
			ON r.report_no = rs.report_no AND
		    cr.account_id = rs.account_id
		WHERE 
			(cr.class_registration_state = "수강중" OR
			cr.class_registration_state = "수료") AND
			l.lecture_no = #{lectureNo}
		GROUP BY 
			r.report_no
	</select>
	
	<!-- 학생별 과제 점수 평균 -->
	<select id="selectAvgReportByStudent" parameterType="int" resultType="java.util.Map">
		SELECT
		    cr.account_id, 
		    ROUND(AVG(case when rs.report_submit_point = -1 then 0
		    		when rs.report_submit_point IS NULL then 0
					 ELSE rs.report_submit_point END), 1) point
		FROM
		    class_registration cr
		LEFT JOIN
		    report_submit rs ON
		    rs.account_id = cr.account_id
		LEFT JOIN
		    report r ON
		    r.report_no = rs.report_no
		WHERE
		    (cr.class_registration_state = "수강중" OR
		    cr.class_registration_state = "수료") AND
		    cr.lecture_no = #{lectureNo}
		GROUP BY
		    cr.account_id
		ORDER BY
		   cr.account_id
	</select>
	
	<!-- 학생별 별점 점수  -->
	<select id="selectStudentStarRating" parameterType="int" resultType="java.util.Map">
		SELECT 
		   lecture_no,
		   account_id, 
		   class_registration_point 
		FROM 
		   class_registration
		WHERE 
		   lecture_no = #{lectureNo}
	</select>
</mapper>